env:
  - name: SAKURA_LOGS_HOST
    valueFrom:
      secretKeyRef:
        name: sakura-monitoring-suite
        key: logs-host
  - name: SAKURA_LOGS_API_KEY
    valueFrom:
      secretKeyRef:
        name: sakura-monitoring-suite
        key: logs-api-key

tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule

config:
  service: |
    [SERVICE]
        Flush 15
        HTTP_Server On
        HTTP_Listen 0.0.0.0
        HTTP_Port 2020
        Health_Check On

  inputs: |
    [INPUT]
        Name tail
        Path /var/log/containers/*.log
        multiline.parser docker, cri
        Tag kube.*

  filters: |
    [FILTER]
        Name kubernetes
        Match kube.*
        Merge_Log On
        Keep_Log On
        Labels On
    
    [FILTER]
        Name    lua
        Match   kube.*
        call    sampling_filter
        code    function sampling_filter(tag, timestamp, record) math.randomseed(os.time() + os.clock() * 1000000); if math.random() <= 0.001 then return 0, timestamp, record; else return -1, timestamp, record; end; end

  outputs: |
    [OUTPUT]
        Name opentelemetry
        Match *
        Host ${SAKURA_LOGS_HOST}
        Port 443
        Tls On
        Logs_URI /v1/logs
        Header Authorization Bearer ${SAKURA_LOGS_API_KEY}
        workers 1

daemonSetVolumes:
  - name: varlog
    hostPath:
      path: /var/log
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  - name: fluentbit-state
    emptyDir: {}

daemonSetVolumeMounts:
  - name: varlog
    mountPath: /var/log
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  - name: fluentbit-state
    mountPath: /var/fluent-bit/state
